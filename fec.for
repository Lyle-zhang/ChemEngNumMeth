      SUBROUTINE FEC(NVCT,COORX,IEX,IPX,TCX,MUX,MLX,ALAM,CAY,FX,UX)
C  THIS CODE USES QUADRILATERAL FINITE ELEMENTS TO SOLVE THE PROBLEM
C               DEL(KDEL(U))-LAMBDA*U-F = 0  ,IN OMEGA
C               KDU/DN+BETA*(U-U0)=Q    ,ON OMEGA
C  AA(.,.) AND AM(.,.) HAVE DIMENSION .GE. NVNP BY (ML+MU+1)
C  PA(.,.) HAS DIMENSION .GE. NVNP BY (2*ML+MU+1)
C********FIRST DIMENSION OF PA MUST BE NDEN .GE. NVNP************
C********NDEN IS ENTERED BY PARAMETER STATEMENT******************
C  V(.),U(.),IP1(.) HAVE DIMENSION .GE. NVNP
C  UI(.),VI(.) HAVE DIMENSION .GE. NNP
C  NDF .EQ. NUMBER OF DEGREES OF FREEDOM IN BASIS SET
C  NE .EQ. NUMBER OF ELEMENTS
C  NCN .EQ. CONSTANT NODES
C  NNP .EQ. TOTAL NUMBER OF NODES
C  NAXI .EQ. 0  FOR CARTESIAN FORMULATION
C  NAXI .EQ. 1  FOR AXISYMMETRIC FORMULATION
C               - FOR AXISYMMETRIC CASE: X=R AND Y=Z
C  NGAU DETERMINES ORDER OF GAUSSIAN INTEGRATION
C  NGAU=1 ]1 BY 1 GAUSS QUADRATURE
C  NGAU=2 ]2 BY 2 GAUSS QUADRATURE
C  NGAU=3 ]3 BY 3 GAUSS QUADRATURE
C  NGAU=4 ]4 BY 4 GAUSS QUADRATURE
C  NVNP= NNP-NCN .EQ. VARIABLE NODES
C  D(.,.) HAS DIMENSION NNP BY 2
C  IPRMAT .EQ. THE NUMBER OF ELEMENTS FOR WHICH ELEMENT MATRICES ARE TO BE
C  PRINTED
C  IPRGMA .EQ. 0 IF NO GLOBAL MATRICE PRINT IS DESIRED
C          .EQ. 1 IF GLOBAL MATICE PRINT IS DESIRED
      COMMON /TR/ FF
      COMMON /BIG/ AA( 80,37),AM( 80,37)
      COMMON VI(128),V( 80),IP1( 80),B( 80),UI(128),U( 80),D( 80,2)
      COMMON ML,ML2,MU,MLM,MLL,NCN,NBDL,DELT,DELTP,EPSMAX,COORD(128,2),
     1AE(9,9),BE(9,9),CE(9),BETA(30,3),T0(30,3),Q(30,3),TC(48),IE(32,9),
     2IP(128,2),IPRMAT
      DIMENSION COORX(128,2),IEX(32,9),IPX(128,2),UX(80),NVCT(8),TCX(48)
      DIMENSION PA(80,55)
      NDEN=80
      ML=MLX
      MU=MUX
      FF=FX
      NDF=4
      NE=NVCT(1)
      NNP=NVCT(2)
      NCN=NVCT(3)
      NGAU=NVCT(4)
      NAXI=NVCT(5)
      IPRMAT=NVCT(6)
      IPRGMA=NVCT(7)
 2257 NVNP=NNP-NCN
      NBDL=1
      MLM=ML+1
      ML2=ML+2
      MLL=MLM+MU
      DO 5 I=1,NVNP
      B(I)=0.0
      DO 5 J=1,MLL
      AM(I,J)=0.0
    5 AA(I,J)=0.0
C  INPUT GLOBAL COORDINATES OF NODE I ]COORDINATES ARE ORDERED IN
C  INCREASING NODE NUMBER] COORD(I,1) .EQ.. X-COORDINATE OF NODE I ,
C  COORD(I,2) .EQ. Y-COORDINATE OF NODE I
      DO 8733 I=1,NNP
      COORD(I,1)=COORX(I,1)
 8733 COORD(I,2)=COORX(I,2)
C  INPUT GLOBAL NODE NUMBERS IN ELEMENT I] NODES ARE TRAVERSED IN A
C  COUNTERCLOCKWISE DIRECTION AROUND ELEMENT.
C  COUNTERCLOCKWISE DIRECTION AROUND ELEMENT(CORNER NODES FIRST THEN
C  MIDSIDE NODES IN THE CASE OF QUADRATIC BASIS SET).
      DO 8734 I=1,NE
      DO 8734 J=1,4
 8734 IE(I,J)=IEX(I,J)
C  INPUT NODE TYPE] IP(I,1) .EQ. 0 IF U IS SPECIFIED AT BOUNDARY NODE I]
C  IP(I,1) .EQ. 1 IF NODE I IS AN INTERIOR NODE] IP(I,1) .EQ. 2 IF THE
C  FLUX IS ZERO AT BOUNDARY NODE I] IP(I,1) .EQ. 3 IF THE GENERAL FLUX
C  BOUNDARY CONDITION APPLIES AT BOUNDARY NODE I.
C  DETERMINATION OF THE NUMBER OF SPECIFIED BOUNDARY NODES ABOVE ACTIVE NODE I
C  INPUT OF U VALUES AT SPECIFIED BOUNDARY NODES. THE ELEMENTS OF TC(.)
C  ARE ORDERED IN INCREASING GLOBAL NODE NUMBER
      DO 8735 I=1,NNP
 8735 IP(I,1)=IPX(I,1)
      DO 8736 I=1,NCN
 8736 TC(I)=TCX(I)
      IP(1,2)=0
      IF(IP(1,1) .EQ. 0)IP(1,2)=1
      DO 62 I=2,NNP
      IP(I,2)=IP(I-1,2)
      IF(IP(I,1) .EQ. 0)IP(I,2)=IP(I,2)+1
   62 CONTINUE
      DO 2 M=1,NE
C  CONSTRUCT ELEMENT MATRICES
      CALL MAKE(NAXI,NDF,NGAU,M,NTRAN)
C  CONSTRUCTION OF GLOBAL CAPACITY AND DISSIPATION MATRICES AND FORCE VECTOR
      DO 523 K=1,NDF
      I=IE(M,K)
      I1=IP(I,2)
      IF(IP(I,1) .EQ. 0)GO TO 524
      I2=I-I1
      B(I2)=B(I2)-CE(K)
  524 DO 523 L=1,NDF
      J=IE(M,L)
      IF(IP(J,1) .EQ. 0)GO TO 523
      J1=IP(J,2)
      J2=J-J1
      IF(IP(I,1) .EQ. 0)GO TO 522
      K1=J2-I2
      K2=K1+MLM
      IF(K2 .LT. 1 .OR. K1 .GT. MU)GO TO 523
      AA(I2,K2)=AA(I2,K2)+AE(K,L)+ALAM*BE(K,L)
      AM(I2,K2)=AM(I2,K2)+BE(K,L)
      GO TO 523
  522 B(J2)=B(J2)-(AE(L,K)+ALAM*BE(L,K))*TC(I1)
  523 CONTINUE
    2 CONTINUE
      IF(IPRGMA .EQ. 0)GO TO 589
      WRITE(6,601)
      WRITE(6,502)((AA(I,J),J=1,MLL),I=1,NVNP)
      WRITE(6,602)
      WRITE(6,502)((AM(I,J),J=1,MLL),I=1,NVNP)
      WRITE(6,603)
      WRITE(6,502)(B(I),I=1,NVNP)
  589 CONTINUE
C  CALCULATION OF STEADY STATE SOLUTION
      DO 82 I=1,NVNP
      DO 82 J=1,MLL
      PA(I,J)=AA(I,J)
   82 CONTINUE
      CALL DECB(NDEN,NVNP,ML,MU,PA,IP1,IER)
      IF(IER .EQ. 0)GO TO 98
      WRITE(6,700)IER
      GO TO 1000
   98 DO 20 I=1,NVNP
   20 U(I)=B(I)
      CALL SOLB(NDEN,NVNP,ML,MU,PA,U,IP1)
      IF(IPRMAT.NE.0)WRITE(6,901)
C  RECONSTRUCTION AND OUTPUT OF FULL NODAL SOLUTION VECTOR
      NA=1
      DO 107 I=1,NNP
      IF(IP(I,1) .EQ. 0)GO TO 108
      I1=I-IP(I,2)
      VI(I)=U(I1)
      GO TO 107
  108 VI(I)=TC(NA)
      NA=NA+1
  107 CONTINUE
      DO 7119 I=1,NNP
 7119 UX(I)=VI(I)
      IF(IPRMAT.EQ.0)GO TO 99
      WRITE(6,500)(VI(I),I=1,NNP)
   99 CONTINUE
      GO TO 1000
 9998 WRITE(6,700)IER
 1000 CONTINUE
  100 FORMAT(12I5,F10.5)
  150 FORMAT(4F10.5,E10.3)
  200 FORMAT(3I5,2F10.7)
  202 FORMAT(20I4)
  203 FORMAT(8F10.7)
  204 FORMAT(15X,2F10.7)
  300 FORMAT(5E15.8)
  400 FORMAT(3E15.8)
  500 FORMAT(6(3X,E15.8))
  502 FORMAT(7(2X,E15.8))
  600 FORMAT(/)
  601 FORMAT(20X,37HAA(I,J):7(2X,E15.8):SUMMED ON I FIRST)
  602 FORMAT(20X,37HAM(I,J):7(2X,E15.8):SUMMED ON I FIRST)
  603 FORMAT(20X,16HB(I):7(2X,E15.8))
  700 FORMAT(10X,I2,16HTH PIVOT IS ZERO)
  901 FORMAT(46X,21HSTEADY STATE SOLUTION)
  902 FORMAT(33X,25HCONSISTENT MASS TRANSIENT,10H(EPS*UMAX=,E10.3,1H))
  903 FORMAT(35X,21HLUMPED MASS TRANSIENT,10H(EPS*UMAX=,E10.3,1H))
 2002 FORMAT(50X,20HEXECUTION STARTED AT,4X,A10)
 2003 FORMAT(49X,21HEXECUTION FINISHED AT,4X,A10)
      RETURN
      END
      SUBROUTINE MAKE(NAXI,NDF,NGAU,M,NTRAN)
C  FF(X,Y) IS THE HEAT SOURCE FUNCTION AND MUST BE SUPPLIED HERE
C  FK1 IS THE X-DIFFUSIVITY FUNCTION AND MUST BE SUPPLIED AS A FUNCTION
C  FK2 IS THE Y-DIFFUSIVITY FUNCTION AND MUST BE SUPPLIED AS A FUNCTION
C  V1(X,Y) IS THE X-COMPONENT OF VELOCITY VECTOR AND MUST BE SUPPLIED HERE
C  V2(X,Y) IS THE Y-COMPONENT OF VELOCITY VECTOR AND MUST BE SUPPLIED HERE
      COMMON /TR/ FXF
      COMMON /BIG/ AA( 80,37),AM( 80,37)
      COMMON VI(128),V( 80),IP1( 80),B( 80),UI(128),U( 80),D(80,2)
      COMMON ML,ML2,MU,MLM,MLL,NCN,NBDL,DELT,DELTP,EPSMAX,COORD(128,2),
     1AE(9,9),BE(9,9),CE(9),BETA(30,3),T0(30,3),Q(30,3),TC(48),IE(32,9),
     2IP(128,2),IPRMAT
      DIMENSION P(4,4),W(4,4),DBAA(9,2),BAA(9),DMAP(2,2),DELBA(9,2)
      DIMENSION BA(9,4,4),DBA(9,2,4,4),DE(9)
      REAL JAC,JAC1,L1,L2,JACI,JAC2
      DATA P/0.0,0.57735026918963,0.77459666924148,0.86113631159405,0.0,
     1-.57735026918963,-.77459666924148,-.86113631159405,0.0,0.0,0.0,
     20.33998104358486,0.0,0.0,0.0,-0.33998104358486/
      DATA W/2.0,1.0,0.55555555555556,0.34785484513745,1.0,1.0,
     10.55555555555556,0.34785484513745,0.0,0.0,0.88888888888889,
     20.65214515486255,0.0,0.0,0.0,0.65214515486255/
      FK1(X,Y)=1.0
      FK2(X,Y)=1.0
      FF(X,Y)=FXF
      V1(X,Y)=0.0
      V2(X,Y)=0.0
   50 DO 5 I=1,NDF
      CE(I)=0.0
      DO 5 J=1,NDF
      BE(I,J)=0.0
    5 AE(I,J)=0.0
C  GAUSSIAN INTEGRATION
      DO 100 I20=1,NGAU
      DO 100 J20=1,NGAU
      IF(M .GT. 1)GO TO 31
      L1=P(NGAU,I20)
      L2=P(NGAU,J20)
C  GENERATE AND STORE DERIVATIVES OF BASIS FNCS. AT GAUSS POINTS
C  GENERATE AND STORE BASIS FNCS. AT GAUSS POINTS
      CALL BASIS(L1,L2,NDF,BAA,DBAA)
      DO 32 IJ=1,NDF
      BA(IJ,I20,J20)=BAA(IJ)
      DO 32 IK=1,2
   32 DBA(IJ,IK,I20,J20)=DBAA(IJ,IK)
   31 X=0.0
      Y=0.0
      DO 30 I=1,NDF
      KA=IE(M,I)
      X=X+COORD(KA,1)*BA(I,I20,J20)
   30 Y=Y+COORD(KA,2)*BA(I,I20,J20)
C  DERIVATIVES OF COORDINATE MAPPING
      DO 71 K3=1,2
      DO 71 K2=1,2
      DMAP(K2,K3)=0.0
      DO 71 K1=1,NDF
      KA=IE(M,K1)
   71 DMAP(K2,K3)=DMAP(K2,K3)+COORD(KA,K2)*DBA(K1,K3,I20,J20)
C  CALCULATION OF AREA JACOBIAN
      JAC=DMAP(1,1)*DMAP(2,2)-DMAP(1,2)*DMAP(2,1)
      JACI=1.0/JAC
      JAC2=(X**NAXI)*JAC
C  GRADIENT OPERATOR
      DO 6 I1=1,NDF
      DELBA(I1,1)=JACI*(DMAP(2,2)*DBA(I1,1,I20,J20)-DMAP(1,2)*
     1DBA(I1,2,I20,J20))
    6 DELBA(I1,2)=JACI*(-DMAP(2,1)*DBA(I1,1,I20,J20)+DMAP(1,1)*
     1DBA(I1,2,I20,J20))
C  CONSTRUCTION OF BULK CONTRIBUTIONS TO ELEMENT MATRICES
      DO 81 I=1,NDF
      CE(I)=CE(I)+FF(X,Y)*JAC2*BA(I,I20,J20)*W(NGAU,I20)*W(NGAU,J20)
      DO 81 J=1,NDF
      AE(I,J)=AE(I,J)+JAC2*(FK1(X,Y)*DELBA(I,1)*DELBA(J,1)+FK2(X,Y)*
     1DELBA(I,2)*DELBA(J,2)+(V1(X,Y)*DELBA(J,1)+V2(X,Y)*DELBA(J,2))*
     2BA(I,I20,J20))*W(NGAU,J20)*W(NGAU,I20)
   81 BE(I,J)=BE(I,J)+JAC2*BA(I,I20,J20)*BA(J,I20,J20)*W(NGAU,I20)*
     1W(NGAU,J20)
  100 CONTINUE
      KB=2
      IF(NDF .EQ. 8)KB=3
      DO 21 K=1,4
      KA=IE(M,K)
      IF(IP(KA,1) .LT. 3)GO TO 21
      READ(5,*)(Q(NBDL,I),I=1,KB)
      IF(IP(KA,1) .NE. 4)GO TO 278
      READ(5,*)(BETA(NBDL,I),I=1,KB)
      READ(5,*)(T0(NBDL,I),I=1,KB)
  278 NBDL=NBDL+1
C  GAUSSIAN INTEGRATION
      DO 7 I20=1,NGAU
      GO TO (8,9,10,11),K
    8 L2=-1.
      L1=P(NGAU,I20)
      GO TO 12
    9 L1=1.
      L2=P(NGAU,I20)
      GO TO 12
   10 L2=1.
      L1=P(NGAU,I20)
      GO TO 12
   11 L1=-1.
      L2=P(NGAU,I20)
C  GENERATE BASIS FNCS. AT GAUSS POINTS
C  GENERATE DERIVATIVES OF BASIS FNCS. AT GAUSS POINTS
   12 CALL BASIS(L1,L2,NDF,BAA,DBAA)
C  GENERATE DERIVATIVES OF COORDINATE MAPPING
      DO 14 K3=1,2
      DO 14 K2=1,2
      DMAP(K2,K3)=0.0
      DO 14 K1=1,NDF
      KA=IE(M,K1)
   14 DMAP(K2,K3)=DMAP(K2,K3)+COORD(KA,K2)*DBAA(K1,K3)
C  CALCULATION OF LINE JACOBIAN
   19 GO TO (15,16,15,16),K
   15 JAC1=SQRT(DMAP(1,1)**2+DMAP(2,1)**2)
      GO TO 17
   16 JAC1=SQRT(DMAP(2,2)**2+DMAP(1,2)**2)
   17 CONTINUE
C  INTERPOLATION OF BETA, Q, AND T0 ON BDRY.
      KK=K+1
      IF(KK .EQ. 5)KK=1
      KKK=K+4
      Q1=Q(NBDL,1)*BAA(K)+Q(NBDL,2)*BAA(KK)
      IF(NDF .EQ. 4)GO TO 35
      Q1=Q1+Q(NBDL,3)*BAA(KKK)
   35 IF(IP(KA,1) .EQ. 3)GO TO 36
      BET=BETA(NBDL,1)*BAA(K)+BETA(NBDL,2)*BAA(KK)
      T01=T0(NBDL,1)*BAA(K)+T0(NBDL,2)*BAA(KK)
      IF(NDF .EQ. 4)GO TO 19
      BET=BET+BETA(NBDL,3)*BAA(KKK)
      T01=T01+T0(NBDL,3)*BAA(KKK)
C  CONSTRUCTION OF BDRY. CONTRIBUTIONS TO ELEMENT MATRICES
   36 DO 18 I=K,K+1
      K4=I
      IF(I .EQ. 5)K4=1
      IF(IP(KA,1) .NE. 3)GO TO 37
      CE(K4)=CE(K4)-Q1*BAA(K4)*JAC1*W(NGAU,I20)
      IF(I .GT. K)GO TO 18
      IF(NDF .GE. 9)CE(KKK)=CE(KKK)-Q1*BAA(KKK)*JAC1*W(NGAU,I20)
      GO TO 18
   37 CE(K4)=CE(K4)-(Q1+BET*T01)*BAA(K4)*JAC1*W(NGAU,I20)
      IF(I .GT. K)GO TO 27
      IF(NDF .GE. 9)CE(KKK)=CE(KKK)-(Q1+BET*T01)*BAA(KKK)*JAC1*
     1W(NGAU,I20)
      IF(NDF .GE. 9)AE(KKK,KKK)=AE(KKK,KKK)+BET*BAA(KKK)*BAA(KKK)*
     1JAC1*W(NGAU,I20)
   27 DO 28 J=K,K+1
      K5=J
      IF(J .EQ. 5)K5=1
      AE(K4,K5)=AE(K4,K5)+BET*BAA(K4)*BAA(K5)*JAC1*W(NGAU,I20)
      IF(J .GT. K)GO TO 28
      IF(NDF .EQ. 4)GO TO 28
      AE(K4,KKK)=AE(K4,KKK)+BET*BAA(K4)*BAA(KKK)*JAC1*W(NGAU,I20)
      AE(KKK,K4)=AE(K4,KKK)
   28 CONTINUE
   18 CONTINUE
    7 CONTINUE
   21 CONTINUE
      IF(M .GT. IPRMAT) GO TO 9987
      WRITE(6,9003)
      WRITE(6,9001)
      WRITE(6,9000)((AE(I,J),J=1,NDF),I=1,NDF)
      WRITE(6,9003)
      WRITE(6,9002)
      WRITE(6,9000)(CE(I),I=1,NDF)
      WRITE(6,9003)
 9000 FORMAT(4(2X,E15.8))
 9001 FORMAT(20X,37HAE(I,J):4(2X,E15.8):SUMMED ON I FIRST)
 9002 FORMAT(20X,17HCE(I):4(2X,E15.8))
 9003 FORMAT(/)
 9987 IF(NTRAN .NE. 2)GO TO 22
      S=0.0
      DO 101 I=1,NDF
      DE(I)=BE(I,I)
      DO 101 J=1,NDF
  101 S=S+BE(I,J)
      T=0.0
      DO 102 I=1,NDF
  102 T=T+DE(I)
      DO 103 I=1,NDF
      DO 103 J=1,NDF
  103 BE(I,J)=0.0
      DO 104 I=1,NDF
  104 BE(I,I)=S*DE(I)/T
   22 CONTINUE
      IF (M .GT. IPRMAT) GO TO 23
      WRITE(6,9004)
      WRITE(6,9000)((BE(I,J),J=1,NDF),I=1,NDF)
 9004 FORMAT(20X,37HBE(I,J):4(2X,E15.8):SUMMED ON I FIRST)
      WRITE(6,9003)
  201 FORMAT(3F10.7)
   23 CONTINUE
      RETURN
      END
      SUBROUTINE BASIS(L1,L2,NDF,BA,DBA)
      REAL L1,L2
C  LINEAR AND QUADRATIC APPROXIMATION ON QUADRILATERALS
      DIMENSION BA(9),DBA(9,2),S(9),T(9)
      DATA S /-1.,1.,1.,-1.,0.,1.,0.,-1.,0./
      DATA T /-1.,-1.,1.,1.,-1.,0.,1.,0.,0./
C  LINEAR BASIS FNCS.
      BASL(X,Y,XI,YI)=0.25*(1.+X*XI)*(1.+Y*YI)
      DBAL(X,Y,XI,YI)=0.25*XI*(1.+Y*YI)
C  SERENDIPITY QUADRATIC FNCS.
      BASQC(X,Y,XI,YI)=0.25*(1.+XI*X)*(1.+YI*Y)*(XI*X+YI*Y-1.)
      DBAQC(X,Y,XI,YI)=0.25*(1.+YI*Y)*(XI*YI*Y+2.*X*XI*XI)
      BASQM(X,Y,XI,YI)=0.5*((1.-X*X)*(1.+YI*Y)*YI*YI+(1.+XI*X)*(1.-Y*Y)*
     1XI*XI)
      DBAQM(X,Y,XI,YI)=-X*(1.+Y*YI)*YI*YI+0.5*(1.-Y*Y)*XI*XI*XI
C  LAGRANGE QUADRATIC BASIS FNCS.
      BASLC(X,Y,XI,YI)=0.25*(XI+X)*(YI+Y)*X*Y
      DBALC(X,Y,XI,YI)=0.25*(XI+2.*X)*(YI+Y)*Y
      BASLM(X,Y,XI,YI)=0.5*(X*(XI+X)*(1.-Y*Y)*XI*XI+Y*(YI+Y)*(1.
     1-X*X)*YI*YI)
      DBALM(X,Y,XI,YI)=0.5*(XI+2.*X)*(1.-Y*Y)*XI*XI-X*Y*(YI+Y)
     1*YI*YI
      BASL0(X,Y)=(1.-Y*Y)*(1.-X*X)
      DBAL0(X,Y)=-2.*X*(1.-Y*Y)
C  LINEAR
      IF(NDF .NE. 4) GO TO 1
      DO 5 I=1,4
      BA(I)=BASL(L1,L2,S(I),T(I))
      DBA(I,1)=DBAL(L1,L2,S(I),T(I))
    5 DBA(I,2)=DBAL(L2,L1,T(I),S(I))
      RETURN
    1 IF (NDF .NE. 8) GO TO 2
C  QUADRATIC SERENDIPTY
      DO 6 I=1,4
      BA(I)=BASQC(L1,L2,S(I),T(I))
      DBA(I,1)=DBAQC(L1,L2,S(I),T(I))
    6 DBA(I,2)=DBAQC(L2,L1,T(I),S(I))
      DO 7 I=5,8
      BA(I)=BASQM(L1,L2,S(I),T(I))
      DBA(I,1)=DBAQM(L1,L2,S(I),T(I))
    7 DBA(I,2)=DBAQM(L2,L1,T(I),S(I))
      RETURN
    2 DO 8 I=1,4
      BA(I)=BASLC(L1,L2,S(I),T(I))
      DBA(I,1)=DBALC(L1,L2,S(I),T(I))
    8 DBA(I,2)=DBALC(L2,L1,T(I),S(I))
      DO 9 I=5,8
      BA(I)=BASLM(L1,L2,S(I),T(I))
      DBA(I,1)=DBALM(L1,L2,S(I),T(I))
    9 DBA(I,2)=DBALM(L2,L1,T(I),S(I))
      BA(9)=BASL0(L1,L2)
      DBA(9,1)=DBAL0(L1,L2)
      DBA(9,2)=DBAL0(L2,L1)
      RETURN
      END
      SUBROUTINE DECB(NDIM,N,ML,MU,B,IP,IER)
      DIMENSION B(NDIM,1),IP(N)
C  LU DECOMPOSITION OF BAND MATRIX A..  L*U = P*A , WHERE P IS A
C  PERMUTATION MATRIX, L IS A UNIT LOWER TRIANGULAR MATRIX, AND U IS AN
C  UPPER TRIANGULAR MATRIX
C  N    =  ORDER OF MATRIX
C  B    =  N BY (2*ML+MU+1) ARRAY CONTAINING THE MATRIX A ON INPUT
C  AND ITS FACTORED FORM ON OUTPUT.
C       ON INPUT, B(I,K) (1 .LE. N) CONTAINS THE K-TH DIAGONAL OF A, OR
C  A(I,J) IS STORED IN B(I,J-I+ML+1).
C  ON OUTPUT, B CONTAINS THE L AND U FACTORS, WITH U IN COLUMNS 1 TO ML+MU+1,
C  AND L IN COLUMNS ML+MU+2 TO 2*ML+MU+1.
C  ML,MU=  WIDTHS OF THE LOWER AND UPPER PARTS OF THE BAND, NOT
C  COUNTING THE MAIN DIAGONAL. TOTAL BANDWIDTH IS ML+MU+1.
C  NDIM =  THE FIRST DIMENSION (COLUMN LENGTH) OF THE ARRAY B.
C          NDIM MUST BE .GE. N.
C  IP   =  ARRAY OF LENGTH N CONTAINING PIVOT INFORMATION.
C  IER  =  ERROR INDICATOR.
C       =  0 IF NO ERRORS
C       = K IF THE K-TH PIVOT CHOSEN WAS ZERO (A IS SINGULAR).
C  THE INPUT ARGUMENTS ARE NDIM, N, ML, MU, B.
C  THE OUTPUT ARGUMENTS ARE B, IP, IER.
      IER=0
      IF (N .EQ. 1) GO TO 92
      LL=ML+MU+1
      N1=N-1
      IF (ML .EQ. 0) GO TO 32
      DO 30 I=1,ML
      II=MU+I
      K=ML+1-I
      DO 10 J=1,II
   10 B(I,J)=B(I,J+K)
      K=II+1
      DO 20 J=K,LL
   20 B(I,J)=0.0
   30 CONTINUE
   32 LR=ML
      DO 90 NR=1,N1
      NP=NR+1
      IF(LR .NE. N)LR=LR+1
      MX=NR
      XM=ABS(B(NR,1))
      IF(ML .EQ. 0)GO TO 42
      DO 40 I=NP,LR
      IF(ABS(B(I,1)) .LE. XM)GO TO 40
      MX=I
      XM=ABS(B(I,1))
   40 CONTINUE
   42 IP(NR)=MX
      IF(MX .EQ. NR)GO TO 60
      DO 50 I=1,LL
      XX=B(NR,I)
      B(NR,I)=B(MX,I)
   50 B(MX,I)=XX
   60 XM=B(NR,1)
      IF(XM .EQ. 0.0)GO TO 100
      B(NR,1)=1./XM
      IF(ML .EQ. 0)GO TO 90
      XM=-B(NR,1)
      KK=MIN0(N-NR,LL-1)
      DO 80 I=NP,LR
      J=LL+I-NR
      XX=B(I,1)*XM
      B(NR,J)=XX
      DO 70 II=1,KK
   70 B(I,II)=B(I,II+1)+XX*B(NR,II+1)
   80 B(I,LL)=0.0
   90 CONTINUE
   92 NR=N
      IF(B(N,1) .EQ. 0.)GO TO 100
      B(N,1)=1./B(N,1)
      RETURN
  100 IER=NR
      RETURN
      END
      SUBROUTINE SOLB(NDIM,N,ML,MU,B,Y,IP)
C  THE FOLLOWING CARD IS FOR OPTIMIZED COMPILATION UNDER CHAT.
      DIMENSION B(NDIM,1),Y(N),IP(N)
C  SOLUTION OF A*X = C GIVEN LU DECOMPOSITION OF A FROM DECB.
C  Y    =  RIGHT-HAND VECTOR C, OF LENGTH N, ON INPUT,
C       =  SOLUTION VECTOR X ON OUTPUT.
C  ALL THE ARGUMENTS ARE INPUT ARGUMENTS.
C  THE OUTPUT ARGUMENT IS Y.
      IF(N .EQ. 1)GO TO 60
      N1=N-1
      LL=ML+MU+1
      IF(ML .EQ. 0)GO TO 32
      DO 30 NR=1,N1
      IF(IP(NR) .EQ. NR)GO TO 10
      J=IP(NR)
      XX=Y(NR)
      Y(NR)=Y(J)
      Y(J)=XX
   10 KK=MIN0(N-NR,ML)
      DO 20 I=1,KK
   20 Y(NR+I)=Y(NR+I)+Y(NR)*B(NR,LL+I)
   30 CONTINUE
   32 LL=LL-1
      Y(N)=Y(N)*B(N,1)
      KK=0
      DO 50 NB=1,N1
      NR=N-NB
      IF(KK .NE. LL)KK=KK+1
      DP=0.0
      IF(LL .EQ. 0)GO TO 50
      DO 40 I=1,KK
   40 DP=DP+B(NR,I+1)*Y(NR+I)
   50 Y(NR)=(Y(NR)-DP)*B(NR,1)
      RETURN
   60 Y(1)=Y(1)*B(1,1)
      RETURN
      END
